plugins {
    id "idea"
    alias libs.plugins.neogradle.userdev
    alias libs.plugins.neogradle.mixin
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

jarJar.enable()
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    //mavenLocal()
    maven {
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "GeckoLib"
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
    }
    maven { url = "https://maven.shedaniel.me" }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/zygzaggaming/hearty")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation libs.neo

    compileOnly libs.jei.commonApi
    compileOnly libs.jei.neoApi
    runtimeOnly libs.jei.neo
    implementation libs.geckolib

    jarJar(group: 'io.github.zygzaggaming.hearty', name: 'hearty-1.20.4-api', version: '[0.2.18,0.3)')

    compileOnly libs.hearty.api
    if (includeHeartyAtRuntime) {
        runtimeOnly files("libs/hearty-1.20.4-neoforge-0.2.0.jar")
    } else {
        runtimeOnly libs.hearty.api
    }
}

//jarJar.enable()
minecraft {
    mappings {
        channel = official()
        version.put "minecraft", "1.20.4"
    }

    accessTransformers.file ("src/main/resources/META-INF/accesstransformer.cfg")
}

runs {
    configureEach {
        workingDirectory project.file("run")
        systemProperty "forge.logging.markers", "REGISTRIES"
        systemProperty "forge.logging.console.level", "debug"

        modSource project.sourceSets.main
    }

    client {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        programArguments.addAll "--username", "Dev"
    }

    server {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
        programArgument "--nogui"
    }

    gameTestServer {
        systemProperty "forge.enabledGameTestNamespaces", project.mod_id
    }

    data {
        programArguments.addAll "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
//tasks.named("jar", Jar).configure {
//    manifest {
//        attributes([
//                "Specification-Title"     : mod_id,
//                "Specification-Vendor"    : mod_authors,
//                "Specification-Version"   : "1", // We are version 1 of ourselves
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : project.jar.archiveVersion,
//                "Implementation-Vendor"   : mod_authors,
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd"T"HH:mm:ssZ")
//        ])
//    }
//
//    // This is the preferred method to reobfuscate your jar file
//    finalizedBy "reobfJar"
//}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named("publish").configure {
//     dependsOn "reobfJar"
// }

// Example configuration to allow publishing using the maven-publish plugin
//publishing {
//    publications {
//        register("mavenJava", MavenPublication) {
//            from components.java
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/repo"
//        }
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

tasks.named("jarJar") {

}

mixin {
    config "zygzagsmod.mixins.json"
}
